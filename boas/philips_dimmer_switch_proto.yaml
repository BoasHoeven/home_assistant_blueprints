blueprint:
  name: Philips Hue Dimmer Switch v2
  description: Bind single/double press actions to buttons
  source_url: https://github.com/BoasHoeven/home_assistant_blueprints/blob/main/boas/philips_dimmer_switch.yaml
  domain: automation
  input:
    dimmer_switch:
      name: Philips Hue Dimmer Switch Action
      description: Mqtt action sensor
      default: ''
      selector:
        entity:
          domain: sensor
    on_press_action:
      name: On Press Action
      description: Action to execute when the on_press button is pressed
      default: []
      selector:
        action:
    double_on_press_action:
      name: On Press Action (Double press)
      description: Action to execute when the on_press button is pressed twice
      default: []
      selector:
        action:
    up_press_action:
      name: Up Press Action
      description: Action to execute when the up_press button is pressed
      default: []
      selector:
        action:
    double_up_press_action:
      name: Up Press Action (Double press)
      description: Action to execute when the up_press button is pressed twice
      default: []
      selector:
        action:
    down_press_action:
      name: Down Press Action
      description: Action to execute when the down_press button is pressed
      default: []
      selector:
        action:
    double_down_press_action:
      name: Down Press Action (Double press)
      description: Action to execute when the down_press button is pressed twice
      default: []
      selector:
        action:
    off_press_action:
      name: Off Press Action
      description: Action to execute when the off_press button is pressed
      default: []
      selector:
        action:
    double_off_press_action:
      name: Off Press Action (Double press)
      description: Action to execute when the off_press button is pressed
      default: []
      selector:
        action:
    double_click_interval:
      name: Double Click Interval
      description: Time in seconds to consider as a double click
      default: 0.3
      selector:
        number:
          min: 0.1
          max: 2
          step: 0.1
          unit_of_measurement: seconds
          mode: slider
    button_press_history:
      name: Required to store the last state
      description: Button press history input text
      default: ''
      selector:
        entity:
          domain: input_text
variables:
  double_press_action: !input double_on_press_action
  up_press_action: !input double_up_press_action
  button_press_history: !input button_press_history
  double_click_interval: !input double_click_interval
  buttons: "{{{'on_press': 'on_press', 'up_press': 'up_press', 'down_press': 'down_press', 'off_press': 'off_press'}}}"
  button_states: >
    {% if states(button_press_history) != "unknown" %}
      {{ states(button_press_history)|to_json }}
    {% else %}
      {{"{'on_press': '0', 'up_press': '0', 'down_press': '0', 'off_press': '0'}"|to_json}}
    {% endif %}

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input dimmer_switch
    to: 
      - 'on_press'
      - 'up_press'
      - 'down_press'
      - 'off_press'

action:
  - variables:
      test: "{{ trigger.to_state.state }}"
      payload: "{{ trigger.to_state.state }}"
      current_time: "{{ as_timestamp(now()) }}"
      my_dict: "{{ button_states | from_json }}"
      last_press_time: "{{ my_dict[payload] }}"
      delta: "{{ current_time - (last_press_time|float) }}"
  - service: input_text.set_value
    target:
      entity_id: !input button_press_history
    data:
      value: >
        {% set my_dict_updated = dict(my_dict, **{payload: current_time | string}) %}
        {{ my_dict_updated | string }}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ payload == 'on_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (delta < double_click_interval) }}"
                sequence: !input double_on_press_action
              - conditions:
                  - condition: template
                    value_template: "{{ (delta > double_click_interval) }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ double_press_action | length > 0 }}"
                        sequence:
                          - delay:
                              seconds: '{{ double_click_interval }}'
                          - choose:
                              - conditions: []
                                sequence: !input on_press_action
                      - conditions:
                          - condition: template
                            value_template: "{{ double_press_action | length == 0 }}"
                        sequence: !input on_press_action
      - conditions:
          - condition: template
            value_template: "{{ payload == 'up_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (delta < double_click_interval) }}"
                sequence: !input double_up_press_action
              - conditions:
                  - condition: template
                    value_template: "{{ (delta > double_click_interval) }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ up_press_action | length > 0 }}"
                        sequence:
                          - delay:
                              seconds: '{{ double_click_interval }}'
                          - choose:
                              - conditions: []
                                sequence: !input up_press_action
                      - conditions:
                          - condition: template
                            value_template: "{{ up_press_action | length == 0 }}"
                        sequence: !input up_press_action
      - conditions:
          - condition: template
            value_template: "{{ payload == 'down_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (delta < double_click_interval) }}"
                sequence: !input double_down_press_action
              - conditions:
                  - condition: template
                    value_template: "{{ (delta > double_click_interval) }}"
                sequence:
                  - delay:
                      seconds: '{{ double_click_interval }}'
                  - choose:
                      - conditions: []
                        sequence: !input down_press_action
      - conditions:
          - condition: template
            value_template: "{{ payload == 'off_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (delta < double_click_interval) }}"
                sequence: !input double_off_press_action
              - conditions:
                  - condition: template
                    value_template: "{{ (delta > double_click_interval) }}"
                sequence:
                  - delay:
                      seconds: '{{ double_click_interval }}'
                  - choose:
                      - conditions: []
                        sequence: !input off_press_action
