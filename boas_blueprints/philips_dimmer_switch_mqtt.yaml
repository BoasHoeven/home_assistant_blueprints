blueprint:
  name: Philips Hue Dimmer Switch v2 (MQTT)
  description: Bind single/double press actions to buttons
  source_url: https://github.com/BoasHoeven/home_assistant_blueprints/blob/main/boas/philips_dimmer_switch_mqtt.yaml
  domain: automation
  input:
    mqtt_topic:
      name: MQTT Topic
      default: zigbee2mqtt/Philips Dimmer V2/action
      description: The MQTT topic to listen for button presses
      selector:
        text:
    on_press_action:
      name: On Button - Single Press Action
      description: Action to execute when the On button is pressed once
      default: []
      selector:
        action:
    double_on_press_action:
      name: On Button - Double Press Action
      description: Action to execute when the On button is pressed twice
      default: []
      selector:
        action:
    up_press_action:
      name: Up Button - Single Press Action
      description: Action to execute when the Up button is pressed once
      default: []
      selector:
        action:
    double_up_press_action:
      name: Up Button - Double Press Action
      description: Action to execute when the Up button is pressed twice
      default: []
      selector:
        action:
    down_press_action:
      name: Down Button - Single Press Action
      description: Action to execute when the Down button is pressed once
      default: []
      selector:
        action:
    double_down_press_action:
      name: Down Button - Double Press Action
      description: Action to execute when the Down button is pressed twice
      default: []
      selector:
        action:
    off_press_action:
      name: Off Button - Single Press Action
      description: Action to execute when the Off button is pressed once
      default: []
      selector:
        action:
    double_off_press_action:
      name: Off Button - Double Press Action
      description: Action to execute when the Off button is pressed twice
      default: []
      selector:
        action:
    double_click_interval:
      name: Double Click Interval
      description: Time in seconds to consider as a double click
      default: 0.3
      selector:
        number:
          min: 0.1
          max: 2
          step: 0.1
          unit_of_measurement: seconds
          mode: slider
    button_press_history:
      name: Required to store the last state
      description: Button press history input text
      default: ''
      selector:
        entity:
          domain: input_text
variables:
  button_press_history: !input button_press_history
  double_click_interval: !input double_click_interval
  buttons_dictionary: >
    {% if states(button_press_history) | regex_match("^\{'on_press': '\d+(\.\d+)?', 'up_press': '\d+(\.\d+)?', 'down_press': '\d+(\.\d+)?', 'off_press': '\d+(\.\d+)?'\}$") %}
      {{ states(button_press_history)|to_json }}
    {% else %}
      {{"{'on_press': '0', 'up_press': '0', 'down_press': '0', 'off_press': '0'}" | to_json}}
    {% endif %}

mode: restart
max_exceeded: silent

trigger:
  - platform: mqtt
    topic: !input mqtt_topic
    payload: 'on_press'
  - platform: mqtt
    topic: !input mqtt_topic
    payload: 'up_press'
  - platform: mqtt
    topic: !input mqtt_topic
    payload: 'down_press'
  - platform: mqtt
    topic: !input mqtt_topic
    payload: 'off_press'

action:
  - variables:
      current_time: "{{ as_timestamp(now()) }}"
      my_dict: "{{ buttons_dictionary | from_json }}"
      last_press_time: "{{ my_dict[trigger.payload] }}"
      delta: "{{ current_time - (last_press_time|float) }}"
  - service: input_text.set_value
    target:
      entity_id: !input button_press_history
    data:
      value: >
        {% set my_dict_updated = dict(my_dict, **{trigger.payload: current_time | string}) %}
        {{ my_dict_updated | string }}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload == 'on_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (delta < double_click_interval) }}"
                sequence: !input double_on_press_action
              - conditions:
                  - condition: template
                    value_template: "{{ (delta > double_click_interval) }}"
                sequence:
                  - delay:
                      seconds: '{{ double_click_interval }}'
                  - choose:
                      - conditions: []
                        sequence: !input on_press_action
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload == 'up_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (delta < double_click_interval) }}"
                sequence: !input double_up_press_action
              - conditions:
                  - condition: template
                    value_template: "{{ (delta > double_click_interval) }}"
                sequence:
                  - delay:
                      seconds: '{{ double_click_interval }}'
                  - choose:
                      - conditions: []
                        sequence: !input up_press_action
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload == 'down_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (delta < double_click_interval) }}"
                sequence: !input double_down_press_action
              - conditions:
                  - condition: template
                    value_template: "{{ (delta > double_click_interval) }}"
                sequence:
                  - delay:
                      seconds: '{{ double_click_interval }}'
                  - choose:
                      - conditions: []
                        sequence: !input down_press_action
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload == 'off_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (delta < double_click_interval) }}"
                sequence: !input double_off_press_action
              - conditions:
                  - condition: template
                    value_template: "{{ (delta > double_click_interval) }}"
                sequence:
                  - delay:
                      seconds: '{{ double_click_interval }}'
                  - choose:
                      - conditions: []
                        sequence: !input off_press_action
